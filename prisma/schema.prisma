generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique

  Customer Customer[]
  Seller   Seller[]
}

model Customer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  fullname  String?
  username  String   @unique
  email     String   @unique
  password  String

  role        Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  Transaction Transaction[]
  Review      Review[]
  Point       Point?
  UserProfile UserProfile?
}

model UserProfile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  u1        Int      @default(0)
  u2        Int      @default(0)
  u3        Int      @default(0)
  u4        Int      @default(0)
  u5        Int      @default(0)
  u6        Int      @default(0)
  u7        Int      @default(0)
  u8        Int      @default(0)
  u9        Int      @default(0)
  u10       Int      @default(0)
  u11       Int      @default(0)
  u12       Int      @default(0)
  u13       Int      @default(0)
  u14       Int      @default(0)
  u15       Int      @default(0)
  u16       Int      @default(0)
  u17       Int      @default(0)
  u18       Int      @default(0)
  u19       Int      @default(0)
  u20       Int      @default(0)

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @unique
}

model Point {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
  loyaltyPoint Int      @default(0)
  badge        Badge    @default(SATU)

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @unique
}

enum Badge {
  SATU
  DUA
  TIGA
  EMPAT
}

model Seller {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  fullname  String
  username  String   @unique
  email     String   @unique
  password  String

  role     Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId   String
  Merchant Merchant[]
  Bank     Bank[]
}

model Bank {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
  name          String
  code          String
  swiftCode     String
  accountNumber String

  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String
}

model Location {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt()
  province     String
  regency      String
  district     String
  village      String
  fullLocation String
  Merchant     Merchant[]
}

model Merchant {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()
  name              String   @unique
  profilePictureUrl String?

  seller      Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId    String
  location    Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId  String
  Food        Food[]
  Transaction Transaction[]
  Review      Review[]
}

model Food {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  name       String
  pictureUrl String?
  price      Int

  category    Category[]
  transaction FoodTransaction[]
  activeFood  ActiveFood?
  merchant    Merchant          @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId  String
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  rating    Int?
  review    String?
  isFilled  Boolean  @default(false)

  customer      Customer    @relation(fields: [customerId], references: [id])
  customerId    String
  merchant      Merchant    @relation(fields: [merchantId], references: [id])
  merchantId    String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique
}

model Transaction {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  totalprice Int
  status     Int      @default(1)

  customer   Customer?         @relation(fields: [customerId], references: [id])
  food       FoodTransaction[]
  merchant   Merchant?         @relation(fields: [merchantId], references: [id])
  merchantId String
  customerId String
  review     Review?
}

model FoodTransaction {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt()
  quantity      Int
  foodName      String
  foodPrice     Int
  Food          Food?        @relation(fields: [foodId], references: [id])
  foodId        String?
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  name      String   @unique

  food Food[]
}

model ActiveFood {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()
  stock            Int
  startTime        DateTime @default(now())
  endTime          DateTime
  durationInSecond Int
  isActive         Boolean

  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String @unique
}
